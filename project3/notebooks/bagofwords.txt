import math
import re
from collections import Counter

WORD = re.compile(r'\w+')

def get_cosine(vec1, vec2):
    intersection = set(vec1.keys()) & set(vec2.keys())
    numerator = sum([vec1[x] * vec2[x] for x in intersection])
    sum1 = sum([vec1[x] ** 2 for x in vec1.keys()])
    sum2 = sum([vec2[x] ** 2 for x in vec2.keys()])
    denominator = math.sqrt(sum1) * math.sqrt(sum2)
    if not denominator:
        return 0.0
    else:
        return float(numerator) / denominator

def text_to_vector(text):
    words = WORD.findall(text)
    return Counter(words)

query_string = "This is a query string." # query vector , will change 
set_of_strings = ["This is a string.", "This is another string.", "Yet another string."] #keywords go here

query_vector = text_to_vector(query_string)
set_vectors = [text_to_vector(s) for s in set_of_strings]

similarities = [get_cosine(query_vector, v) for v in set_vectors]
## descending sort - want the highest 